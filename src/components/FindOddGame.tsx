import React, { useState, useEffect } from 'react';

const TASKS = [
  {
    id: 1,
    items: ['üçé', 'üçé', 'üçé', 'üçå'],
    odd: 3,
    description: '–ù–∞–π–¥–∏ —Ñ—Ä—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –¥—Ä—É–≥–∏–µ!',
  },
  {
    id: 2,
    items: ['üê∂', 'üê±', 'üê∂', 'üê∂'],
    odd: 1,
    description: '–ù–∞–π–¥–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è!',
  },
  {
    id: 3,
    items: ['‚≠ê', '‚≠ê', '‚ù§Ô∏è', '‚≠ê'],
    odd: 2,
    description: '–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Ç–∞–∫–æ–π –∫–∞–∫ –≤—Å–µ?',
  },
  {
    id: 4,
    items: ['üöó', 'üöó', 'üöó', 'üöÅ'],
    odd: 3,
    description: '–ù–∞–π–¥–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è!',
  },
  {
    id: 5,
    items: ['üå∏', 'üå∫', 'üå∏', 'üå∏'],
    odd: 1,
    description: '–ö–∞–∫–æ–π —Ü–≤–µ—Ç–æ–∫ –¥—Ä—É–≥–æ–π?',
  },
  {
    id: 6,
    items: ['üü•', 'üü•', 'üü¶', 'üü•'],
    odd: 2,
    description: '–ù–∞–π–¥–∏ –∫–≤–∞–¥—Ä–∞—Ç –¥—Ä—É–≥–æ–≥–æ —Ü–≤–µ—Ç–∞!',
  },
  {
    id: 7,
    items: ['üê†', 'üêü', 'üê†', 'üê†'],
    odd: 1,
    description: '–ö–∞–∫–∞—è —Ä—ã–±–∫–∞ –Ω–µ —Ç–∞–∫–∞—è?',
  },
  {
    id: 8,
    items: ['üéà', 'üéà', 'üéà', 'üéÅ'],
    odd: 3,
    description: '–ß—Ç–æ –∑–¥–µ—Å—å –ª–∏—à–Ω–µ–µ?',
  },
];

export default function FindOddGame() {
  const [currentTask, setCurrentTask] = useState(TASKS[0]);
  const [score, setScore] = useState(0);
  const [message, setMessage] = useState('');
  const [level, setLevel] = useState(1);

  useEffect(() => {
    generateTask();
  }, []);

  const generateTask = () => {
    const randomTask = TASKS[Math.floor(Math.random() * TASKS.length)];
    setCurrentTask(randomTask);
    setMessage('');
  };

  const handleItemClick = (index: number) => {
    if (index === currentTask.odd) {
      setMessage('üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!');
      setScore(score + 10);
      
      if ((score + 10) % 30 === 0) {
        setLevel(level + 1);
      }
      
      setTimeout(() => {
        generateTask();
      }, 2000);
    } else {
      setMessage('–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üí™');
      setTimeout(() => setMessage(''), 1500);
    }
  };

  return (
    <div className="relative w-full min-h-screen bg-gradient-to-br from-blue-200 via-purple-200 to-pink-200 p-8">
      <div className="max-w-5xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="font-orbitron text-6xl text-blue-600 mb-2">üîç –ù–∞–π–¥–∏ –ª–∏—à–Ω–µ–µ!</h1>
          <p className="text-blue-500 text-2xl">–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è?</p>
        </div>

        <div className="flex justify-center gap-8 mb-8">
          <div className="bg-white/90 backdrop-blur-sm px-8 py-4 rounded-2xl shadow-lg">
            <div className="text-4xl font-bold text-blue-600">üèÜ {score}</div>
            <div className="text-sm text-blue-400">–û—á–∫–∏</div>
          </div>
          <div className="bg-white/90 backdrop-blur-sm px-8 py-4 rounded-2xl shadow-lg">
            <div className="text-4xl font-bold text-purple-600">üìä {level}</div>
            <div className="text-sm text-purple-400">–£—Ä–æ–≤–µ–Ω—å</div>
          </div>
        </div>

        <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl p-12 mb-8">
          <div className="text-center mb-12">
            <p className="text-4xl font-bold text-purple-600 mb-2">
              {currentTask.description}
            </p>
            <p className="text-2xl text-gray-600">
              –ù–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ!
            </p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto">
            {currentTask.items.map((item, index) => (
              <button
                key={index}
                onClick={() => handleItemClick(index)}
                className="group relative"
              >
                <div className="bg-gradient-to-br from-purple-400 to-pink-400 hover:from-purple-500 hover:to-pink-500 rounded-3xl p-12 shadow-2xl hover:scale-110 active:scale-95 transition-all duration-200">
                  <div className="text-9xl">{item}</div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {message && (
          <div className={`text-center py-6 px-12 rounded-2xl shadow-2xl text-4xl font-bold mb-6 ${
            message.includes('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
              ? 'bg-green-400/90 text-white'
              : 'bg-orange-400/90 text-white'
          }`}>
            {message}
          </div>
        )}

        <div className="bg-white/70 backdrop-blur-sm px-6 py-4 rounded-xl text-center">
          <p className="text-blue-600 font-semibold text-xl">
            üí° –ü–æ—Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ ‚Äî –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö!
            <br />
            –ù–∞–π–¥–∏ –µ–≥–æ –∏ –Ω–∞–∂–º–∏! üåü
          </p>
        </div>
      </div>
    </div>
  );
}
